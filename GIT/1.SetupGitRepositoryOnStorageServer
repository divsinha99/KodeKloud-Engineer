# Task
The Nautilus development team has provided requirements to the DevOps team for a new application development project, specifically requesting the establishment of a Git repository. Follow the instructions below to create the Git repository on the Storage server in the Stratos DC:

- Utilize yum to install the git package on the Storage Server.
- Create a bare repository named /opt/apps.git (ensure exact name usage).

# Solution:

First, we need to ssh into the storage server. The infra details for all the servers are mentioned in the link - [https://kodekloudhub.github.io/kodekloud-engineer/docs/projects/nautilus#infrastructure-details] and then as superuser need to perform the below steps:

```sh
#ssh into the storage server
ssh natasha@172.16.238.15

#switch to super user
sudo su -

#update the package manager
sudo yum install update

# install git command:
sudo yum install git

#check installation of git using below:
git --version

#create the directory
mkdir /opt/apps.git 

#initialize git repo using --bare option 
git init --bare /opt/apps.git
```

# Key Takeaway:

## Understanding *git init* and *git init --bare*:

### 1. git init:

This command creates a new Git repository in the current directory.
It initializes a working directory with a .git folder where all the version control information is stored.
You can add files, make commits, and work on your code directly in this repository.
Example Scenario:
Imagine you are starting a new project called "MyApp":

```sh
mkdir MyApp
cd MyApp
git init
```

Now you have a Git repository for "MyApp" where you can add files and track changes.

### 2. git init --bare:

This command creates a bare repository, which means it does not have a working directory.
A bare repository only contains the version control information (the .git folder) and is typically used as a central repository to share code.
You cannot directly edit files in a bare repository; itâ€™s meant for pushing and pulling changes.
Example Scenario:
Suppose you want to create a central repository for your team to collaborate on "MyApp":

```sh
mkdir MyApp.git
cd MyApp.git
git init --bare
```

Now, "MyApp.git" is a bare repository. Your team members can clone this repository and push their changes to it, but they cannot edit files directly in "MyApp.git".

#### Key Differences:

* Working Directory:

    * git init: Creates a working directory (you can edit files).
    * git init --bare: No working directory (no direct file edits).

* Use Case:

    * git init: For local development.
    * git init --bare: For a shared central repository.
    
In summary, use git init when you want to work on a project locally, and use git init --bare when you want to set up a central location for collaboration.